[gd_scene load_steps=5 format=2]

[ext_resource path="res://Experimental/Noise.png" type="Texture" id=1]

[sub_resource type="Shader" id=3]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back, unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D noiseTexture;
uniform vec3 baseColorRGB = vec3(0.2, 0.1, 0.4);
uniform float speed = 0.15;

mat2 makem2(in float theta)
{
	float c = cos(theta);
	float s = sin(theta);
	vec2 part1 = vec2(c, -s);
	vec2 part2 = vec2(s, c);
	return mat2(part1, part2);
}

float noise(in vec2 x)
{
	return texture(noiseTexture, x * 0.01).x;
}

float fbm(in vec2 p)
{
	float z = 2.0;
	float rz = 0.0;
	vec2 bp = p;
	for (float i = 1.0; i < 6.0; i++)
	{
		rz += abs((noise(p) - 0.5) * 2.0) / z;
		z = z * 2.0;
		p = p * 2.0;
	}
	return rz;
}

float dualfbm(in vec2 p)
{
	//get two rotated fbm calls and displace the domain
	vec2 p2 = p * 0.7;
	vec2 basis = vec2(fbm(p2 - (TIME * speed) * 1.6), fbm(p2 + (TIME * speed) * 1.7));
	basis = (basis - 0.5) * 0.2;
	p += basis;
	
	//coloring
	return fbm(p * makem2((TIME * speed) * 0.2));
}

float circ(vec2 p) 
{
	float tau = 6.2831853;
	float r = length(p);
	r = 0.5 * log(r);
	return abs(mod(r * 4.0, tau) - 3.14) * 3.0 + 0.2;
}

//void fragment()
//{
	//setup system
//	vec2 p = UV.xy / (1.0 / TEXTURE_PIXEL_SIZE).xy - 0.5;
//	p.x *= (1.0 / TEXTURE_PIXEL_SIZE).x / (1.0 / TEXTURE_PIXEL_SIZE).y;
//	p *= 4.0;
//
//	float rz = dualfbm(p);
	
	//rings
//	p /= exp(mod((TIME * speed) * 10.0, 3.14159));
//	rz *= pow(abs((0.1 - circ(p))), 0.9);
	
	//final color
//	vec3 col = vec3(0.1) / rz;
//	col = pow(abs(col), vec3(0.99));
//	COLOR = vec4(col, 1.0);
//}


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
    float basic_fresnel = fresnel(1.0, NORMAL, vec3(0, 0, 1.0));
    
    vec2 tex_pixel_size = vec2(2.0 / 256.0, 1.0 / 256.0);
    
//    vec2 uv = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0);
    vec2 p = SCREEN_UV.xy;
//	p.x *= (1.0 / tex_pixel_size).x / (1.0 / tex_pixel_size.y);
	p *= 16.0;
	
	float rz = dualfbm(p);
	
	//rings
//	p /= exp(mod((TIME * speed) * 10.0, 3.14159));
//	rz *= pow(abs((0.1 - circ(p))), 0.9);
	
	//final color
	vec3 col = vec3(0.1) / rz;
	col = pow(abs(col), vec3(0.99));
    
//	ALBEDO = (albedo.rgb * albedo_tex.rgb) * col + basic_fresnel;
    ALBEDO = albedo.rgb + col * vec3(0.2, 4.0, 1.2) * basic_fresnel;
	METALLIC = metallic;
	ROUGHNESS = roughness;
//	SPECULAR = specular;
	ALPHA = (albedo.a * albedo_tex.a * min(1.0, col.x + 0.5));
}

"

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 3 )
shader_param/albedo = Color( 0.901961, 0.129412, 0.670588, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/baseColorRGB = Vector3( 0.2, 0.1, 0.4 )
shader_param/speed = 0.15
shader_param/noiseTexture = ExtResource( 1 )

[sub_resource type="SphereMesh" id=2]
material = SubResource( 4 )

[node name="Spatial" type="MeshInstance"]
mesh = SubResource( 2 )
material/0 = null
